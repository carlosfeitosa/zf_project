<?php
require_once 'Zend/Json.php';

/*
 * retorna as mensagens do zend_form, em um formato padronizado para zend_form e zend_form_subForm
 */
function retornaZendFormMessages(Zend_Form $form = null){
	$messages = array();
	if ($form and $form->getMessages()) {
		$nomeFormulario = $form->getName();
		//Basico_OPController_UtilOPController::print_debug($form->getMessages());
		
		foreach ($form->getMessages() as $key => $value) {	
			foreach ($value as $messageKey => $messageValue) {
				if (is_subclass_of($form, 'Zend_Form_SubForm')) {
					$nomeElemento = $nomeFormulario . '-' . $messageKey;
					$valorElemento = $messageValue;
				} else {
					$nomeElemento = $key;
					$valorElemento = $value;
				}
				$messages[$nomeFormulario][$nomeElemento] = $valorElemento;
			}	
		}
	}
	return $messages;
}


$arrayScripts        = null;
$modules 		     = null;
$dijits 		     = null;
$zendFormsMessages   = array();
$formularios         = array();
$arrayHtmlElements   = array();
$existeFormNoRequest = null;
$idResponseSource	 = null;

// percorre as variáveis e objetos contidas na view
foreach ($this->getVars() as $keyVarView => $valueVarView){
	
	// verifica se a variável é do tipo array.
	if (is_array($valueVarView)) {
		
		// percorre o array enviado da view 
		foreach ($valueVarView as $key => $value) {
			
			if ($keyVarView === 'scripts') {
				$arrayScripts[] = $value;
				continue;
			}
			
			// se o conteúdo da possição percorrida não for um objeto, carrega o conteúdo no array $html[]. 
			if (!is_object($value)) {
				
				$arrayHtmlElements = Basico_OPController_UtilOPController::concatenaConteudoChaveArray($arrayHtmlElements, $keyVarView, $value);
			} else {

				$i = 0;
				// verifica se existe objetos do tipo formulário na view
				if (is_object($value) and is_subclass_of($value, 'Zend_Form')) {
						
					// verifica se existe subforms no formulário
					if ($value->getSubForms()) {
						
						// percorre os subforms
						foreach ($value->getSubForms() as $subForm) {
							// verifica se existe o formulário no idResquestSource.
							if (isset($_REQUEST['idRequestSource']) and ($subForm->getName() == $_REQUEST['idRequestSource'])) {
								
								$idResponseSource = $_REQUEST['idRequestSource'];
								$existeFormNoRequest = true;
													
								// carrega array com as mensagens do form
								$zendFormsMessages = retornaZendFormMessages($subForm);
								
								// percorre todos os elementos do subform
								foreach ($subForm->getElements() as $elementoSubform){
									
									// verifica se o elemento e do tipo hash
									if ($elementoSubform->getType() == 'Zend_Form_Element_Hash') {
										// renderizando elemento hash, para ser gerado o novo valor do hash e ficar disponível em dojo()->getDijits();
										$elementoSubform->render();
									}
									
									if ($elementoSubform->getName() === 'BasicoCadastrarDadosUsuarioDadosPessoaisTextboxMunicipioNascimento'){
										$elementoSubform->setValue('modificado pela view do ajax...');
									}
									// percorrendo o request em busca de elementos modificados.
									foreach ($_REQUEST[$subForm->getName()] as $keyRequest => $valueRequest) {
										
										// verificando se o valor do elemento enviado do request é diferente do valor existente no controller.
										if ( ($elementoSubform->getName() === $keyRequest) and ($elementoSubform->getValue() !== $valueRequest) ) {
											$idDijit = $subForm->getName() . '-' . $elementoSubform->getName();
											$dijitParametros['value'] = $elementoSubform->getValue();
																													
											$this->dojo()->addDijit($idDijit, $dijitParametros);
										}
									}
								}
								break 2;
								
							} else {
								$formularios[] = $value;
							}
						}
						
						$arrayHtmlElements = Basico_OPController_UtilOPController::concatenaConteudoChaveArray($arrayHtmlElements, $keyVarView, $value->render());
						
					} else {
								
						// verifica se existe o formulário no request
						if (isset($_REQUEST['idRequestSource']) and ($value->getName() == $_REQUEST['idRequestSource'])) {
							
							$idResponseSource = $_REQUEST['idRequestSource'];
							$existeFormNoRequest = true;
							
							$zendFormsMessages = retornaZendFormMessages($value);
							
							// percorre todos os elementos do form em busca do elemento hash
							foreach ($value->getElements() as $elementoform){
								
								if ($elementoform->getType() == 'Zend_Form_Element_Hash') {
									// renderizando elemento hash, para ser gerado o novo valor do hash e ficar disponível em dojo()->getDijits();
									$elementoform->render();
								}
								
								// percorrendo o request em busca de elementos modificados.
								foreach ($_REQUEST as $keyRequest => $valueRequest) {
									
									// verificando se o valor do elemento enviado do request, é diferente do valor existente no controller.
									if ( ($elementoform->getName() === $keyRequest) and ($elementoform->getValue() !== $valueRequest) ) {
										$idDijit = $subForm->getName() . '-' . $elementoform->getName();
										$dijitParametros['value'] = $elementoform->getValue();
																												
										$this->dojo()->addDijit($idDijit, $dijitParametros);
									}
								}
							}
							break;
							
						} else {
							$formularios[] = $value;
							
							// renderizando o formulario
							$arrayHtmlElements = Basico_OPController_UtilOPController::concatenaConteudoChaveArray($arrayHtmlElements, $keyVarView, $value->render());
						}
					}
				}
				$i++;
			}
		}
	} else{
		
		// escreve conteúdo do javascript
		if ($keyVarView === 'scripts') {
			$arrayScripts[] = $valueVarView;
		}
		
		// escreve conteúdo do elemento html.
		$arrayHtmlElements = Basico_OPController_UtilOPController::concatenaConteudoChaveArray($arrayHtmlElements, $keyVarView, $valueVarView);		
	}
}

// se não existir formulario(s) no reques, devolve o(s) formulario(s) enviados do controller
if (!$existeFormNoRequest) {
	// carrega os módulos do dojo necessarios aos formulários.
	$modules = $this->dojo()->getModules();
	
} else {
	$arrayHtmlElements = null;
}

// carregando os dijits.
$dijits = $this->dojo()->getDijits();

// carrengando scripts do header
//Basico_OPController_UtilOPController::print_debug($arrayScripts, true);
$header['title']    = $this->headTitle()->toString();
$header['link']     = $this->headLink()->toString(); 
$header['script'][] = $this->headScript()->toString();
$header['script'][] = $arrayScripts;


//Basico_OPController_UtilOPController::print_debug($arrayScripts, true, false, true);



// monta resposta para o cliente...
$response = array('view' => array('header'            => $header,
								  'scripts'           => $arrayScripts,
								  'modules'           => $modules,
								  'dijits'            => $dijits,
								  'idResponseSource'  => $idResponseSource,
								  'zendFormsMessages' => $zendFormsMessages,
								  'html'  		      => $arrayHtmlElements,
								  
								 ),
				 );

echo Zend_Json::encode($response);